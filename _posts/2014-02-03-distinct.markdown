---
layout: sqlschool-lesson
category: "intermediate"
title:  "Counting the Unique Values in a Column"
date:   2014-02-01 00:00:57
---

This lesson will use the same Apple stock price data from the [previous lesson.](/intermediate/aggregation-functions.html)

Start by running this code to remind yourself what's in the table that will be used in this tutorial. Remember to switch over to Mode and run any of the code you see in the grey boxes to get a sense of what the output will look like.

    SELECT * FROM tutorial.aapl_historical_stock_price

###DISTINCT
You'll occasionally want to look at only the unique values in a particular column. You can do this using `SELECT DISTINCT` syntax:

    SELECT DISTINCT month
      FROM tutorial.aapl_historical_stock_price

If you include 2 (or more) columns in a `SELECT DISTINCT` clause, your results will contain all of the unique pairs of those two columns:

    SELECT DISTINCT year, month
      FROM tutorial.aapl_historical_stock_price

*Note: You only need to include `DISTINCT` once in your `SELECT` clause &mdash; you do not need to add it for each column name.*

<div class="practice-prob">
  Write a query that returns the unique values in the <code>year</code> column, in chronological order
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/2dde870b5811" target="_blank">See the Answer &raquo;</a>
</div>

`DISTINCT` can be particularly helpful when exploring a new data set. In many real-world scenarios, you will generally end up writing several preliminary queries in order to figure out the best approach to answering your initial question. Looking at the unique values on each column can help identify how you might want to group or filter the data.

###Using  DISTINCT in aggregations
You can use `DISTINCT` when performing an aggregation. You will probably use it most commonly with the `COUNT` function.

In this case, you should run the query below that counts the unique values in the `month` column.

    SELECT COUNT(DISTINCT month) AS unique_months
      FROM tutorial.aapl_historical_stock_price

The results show that there are 12 unique values (other examples may be less obvious). That's a small enough number that you might be able to aggregate by month and be able to interpret the results fairly early. For example, you might follow this up by taking average trade volumes by month to get a sense of when Apple stock really moves:

    SELECT month,
           AVG(volume) AS avg_trade_volume
      FROM tutorial.aapl_historical_stock_price
     GROUP BY month
     ORDER BY 2 DESC

Okay, back to `DISTINCT`. You'll notice that `DISTINCT` goes inside the aggregation function rather than at the beginning of the `SELECT` clause. Of course, you can `SUM` or `AVG` the distinct values in a column, but there are fewer practical applications for them. For `MAX` and `MIN`, you probably shouldn't ever use `DISTINCT` because the results will be the same as without `DISTINCT`, and the `DISTINCT` function will make your query substantially slower to return results.

<div class="practice-prob">
  Write a query that counts the number of unique values in the <code>month</code> column for each year.
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/ad26c0db22c5" target="_blank">See the Answer &raquo;</a>
</div>

<div class="practice-prob">
  Write a query that separately counts the number of unique values in the <code>month</code> column and the number of unique values in the `year` column.
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/bb4e07760340" target="_blank">See the Answer &raquo;</a>
</div>

###DISTINCT Performance
It is worth noting that using `DISTINCT`, particularly in aggregations, can slow your queries down quite a bit. We'll cover this in greater depth in the [advanced tutorial](/advanced/faster-queries.html), and provide an excellent workaround in a [pre-built recipe](/solutions-to-common-problems/fast-count-distinct.html).
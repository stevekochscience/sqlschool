---
layout: sqlschool-lesson
category: "the-basics"
title:  "Ordering Your Results"
date:   2014-01-01 00:00:55
---

This lesson uses the same data from the [Billboard Music Charts](http://www.billboard.com/charts) as the [previous lesson](/the-basics/logical-operators.html). If you're skipping directly to this lesson, read the description in the previous lesson first.

Don't forget to run all of the examples in the grey boxes in Mode so that you can see what they actually do!

###ORDER BY
Now that you can filter, it's time to learn how to sort. The `ORDER BY` clause allows you to reorder your results based on the data in one or more columns. First, take a look at how the table is ordered by default:

    SELECT * FROM tutorial.billboard_top_100_year_end

Now let's see what happens when we order by one of the columns:

    SELECT * 
      FROM tutorial.billboard_top_100_year_end
     ORDER BY artist

You'll notice that the results are now ordered alphabetically from a to z based on the content in the `artist` column. This is referred to as ascending order, and is SQL's default. If you order a numerical column in ascending order, it will start with smaller (or most negative) numbers, with each successive row having a higher numerical value than the previous. Here's an example using a numerical column:

    SELECT * 
      FROM tutorial.billboard_top_100_year_end
     WHERE year = 2013
     ORDER BY year_rank

If you'd like your results in the opposite order (referred to as descending order), you need to add the `DESC` operator:

    SELECT * 
      FROM tutorial.billboard_top_100_year_end
     WHERE year = 2013
     ORDER BY year_rank DESC

<div class="practice-prob">
  Write a query that returns all rows from 2012, ordered by song title from Z to A.
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/bb73b574f95a" target="_blank">See the Answer &raquo;</a>
</div>

You can also order by mutiple columns. This is particularly useful if your data falls into categories and you'd like to organize rows by date, for example, but keep all of the results within a given category together. This example make the most recent years come first, but order top-ranks songs before lower-ranked songs:

    SELECT * 
      FROM tutorial.billboard_top_100_year_end
      WHERE year_rank <= 3
     ORDER BY year DESC, year_rank

You can see a couple things from the above query: First, columns in the `ORDER BY` clause must be separated by commas. Second, the `DESC` operator is only applied to the column that precedes it. Finally, the results are sorted by the first column mentioned (`year`), then by `year_rank` afterward. You can see the difference the order makes by running the following query:

    SELECT * 
      FROM tutorial.billboard_top_100_year_end
     WHERE year_rank <= 3
     ORDER BY year_rank, year DESC

Finally, you can make your life a little easier by substituting numbers for column names in the `ORDER BY` clause. The numbers will correspond to the order in which you list columns in the `SELECT` clause. For example, the following query is exactly equivalent to the previous query:

    SELECT * 
      FROM tutorial.billboard_top_100_year_end
     WHERE year_rank <= 3
     ORDER BY 2, 1 DESC

*Note: this functionality (numbering columns instead of using names) is supported by Mode, but not by every flavor of SQL, so if you're using another system or connected to certain types of databases, it may not work.*

When using `ORDER BY` with a row limit (either through the check box on the query editor or by typing in `LIMIT`), the ordering clause is executed first. This means that the results are ordered **before** limiting to only a few rows, so if you were to rank by columnb, for example, you can be sure that you are getting the lowest values of columnb in the entire table, not just in the first 100 rows of the table.

<div class="practice-prob">
  Write a query that returns all rows from 2010 ordered by rank, with artists ordered alphabetically for each song.
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/1e40d45ef12f" target="_blank">See the Answer &raquo;</a>
</div>

###Using Comments
You can "comment out" pieces of code by adding combinations of characters. In other words, you can specify parts of your query that will not actually be treated like SQL code. It can be helpful to include comments that explain your thinking so that you can easily remember what you intended to do if you ever want to revisit your work. Commenting can also be useful if you want to test variations on your query while keeping all of your code intact. 

You can use`--` (two dashes)  to comment out everything to the right of them on a given line:

    SELECT *  --This comment won't affect the way the code runs
      FROM tutorial.billboard_top_100_year_end
     WHERE year = 2013

You can also leave comments across multiple lines using `/*` to begin the comment and `*/` to close it:

    /* Here's a comment so long and descriptive that
    it could only fit on multiple lines. Fortunately,
    it, too, will not affect how this code runs. */
    SELECT *
      FROM tutorial.billboard_top_100_year_end
     WHERE year = 2013

###Practice problems
<div class="practice-prob">
  Write a query that shows all rows for which T-Pain was a group member, ordered by rank on the charts.
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/e162590d4dd9" target="_blank">See the Answer &raquo;</a>
</div>

<div class="practice-prob">
  Write a query that returns songs that ranked between 10 and 20 (inclusive) in 1993, 2003, or 2013. Order the results by year and rank, and leave a comment on each line of the <code>WHERE</code> clause to indicate what that line does
</div>
<div class="practice-prob-answer">
  <a href="https://modeanalytics.com/tutorial/reports/34a457c9e468" target="_blank">See the Answer &raquo;</a>
</div>

###What Others Have Done
One of the defining features of Mode is that much of the work done using it is made public for others to view, copy, and improve upon. We strongly encourage you to check out some of the other work in Mode when you feel like taking a break from tutorials.

Having just worked with Billboard's data, you might be interested in this piece of work: Mode's own [Benn Stancil](https://modeanalytics.com/benn) used this same dataset to explore One-Hit Wonders and [published his results on the Mode blog](http://blog.modeanalytics.com/one-hit-wonders/). You can view the queries that produced some of his charts here:

* [Count of artists by number of years they appear in the top 100](https://modeanalytics.com/benn/reports/77722338413b/runs/b2b0ec93f18c)
* [Count of songs by artists who appeared 5 or more times](https://modeanalytics.com/benn/reports/35e501d8a817/runs/2a21f3e6792d)
* [Chance of returning to the charts by debut position](https://modeanalytics.com/benn/reports/196cc398735c/runs/c6619b9e4b0d)
* [Chance of returning by number of songs in debut year](https://modeanalytics.com/benn/reports/df676f8e1c51/runs/bd46684795e1)
* [Chance of returning by time since last hit and number of hits](https://modeanalytics.com/benn/reports/318c4eb50378/runs/36f848b3c923)

These queries contain some advanced concepts that you may not yet understand. Don't worry &mdash; you'll be there after the Intermediate tutorial.

###What's Next?
Congrats on completeing the Beginner SQL Tutorial! Now that you've got some skills, you can [explore some other data on Mode](https://modeanalytics.com/explore/tables) or [upload your own](https://modeanalytics.com)

You may find that your skills are limiting, though. If you want to do things like aggregate data across entire columns or merge multiple datasets together, check out the [Intermediate Tutorial](/intermediate/aggregation-functions.html).
